{"version":3,"sources":["logo.svg","Data/tasks.js","Contexts/TimeContext.js","Components/TaskScheduleComponent.jsx","Components/ScheduleComponent.jsx","Components/VizView.jsx","Components/ReportComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["tasks","Design","Programming","TimeContext","React","createContext","TimeProvider","props","useState","scheduled","setScheduled","reported","setReported","provided","addScheduledTime","schedule","scheduledWork","map","item","hours","task","quarters","addReportedTime","reports","newReports","report","startMoment","moment","startTime","endMoment","endTime","duration","diff","Math","round","asHours","console","log","removeScheduledTime","id","filter","time","removeReportedTime","getReportedTimesBasedOnTask","grouped","d3","v","d","Provider","value","children","TaskScheduleComponent","addTime","inputHours","setHours","className","onChange","e","target","min","defaultValue","style","width","ScheduleComponent","useContext","localScheduled","setLocalScheduled","Object","keys","reduce","obj","category","hiddenState","setHiddenState","onChangeSchedule","index","findIndex","newScheduleItem","scheduleCopy","getScheduledTimeForTask","scheduledTimes","scheduledObj","find","Consumer","onClick","UpOutlined","DownOutlined","type","dataSource","key","name","grade","dueDate","columns","title","dataIndex","VizComponent","RangePicker","TimePicker","DropdownMenu","Menu","SubMenu","onTreeChange","cat","selectable","ReportComponent","showModal","setShowModal","Date","selectedDate","setSelectedDate","setReports","rollingIdx","setRollingIdx","onDateSelect","date","toDate","onOk","onCancel","getReportsFordate","momentDate","isSame","dateCellRender","reportsForDate","sort","a","b","display","backgroundColor","color","marginBottom","borderRadius","whiteSpace","textOverflow","overflow","format","when","length","message","onSelect","visible","toLocaleDateString","dates","garbage","idx","newReport","reportCopy","changeTaskTime","changeReportTask","App","basename","mode","height","Item","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f4343cd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\nconst tasks = {\n    Design: [\n        \"Designed visual structures\",\n        \"Created visual designs and aestethics\",\n        \"Designed visual mappings\",\n        \"Designed view transformations\"\n    ],\n    Programming: [\n        \"Created webpage\",\n        \"Programmed front end\",\n        \"Programmed back end\",\n        \"Processed raw data\"\n    ],\n}\nexport default tasks","import React, { useState } from 'react';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport const TimeContext = React.createContext()\n\nfunction TimeProvider(props) {\n    //some default states for testing purposes\n    const [scheduled, setScheduled] = useState([])\n    const [reported, setReported] = useState([])\n    const [index, setIndex] = useState(1);\n\n    const provided = {\n        scheduled,\n        reported,\n        addScheduledTime: (schedule) => {\n            const scheduledWork = schedule.map(item => ({\n                hours: item.hours,\n                task: item.task,\n                quarters: item.hours * 4\n            }))\n            setScheduled(scheduledWork) //overwrite at the moment, why the fuck not?\n            //setIndex(index + 1);\n        },\n        addReportedTime: (reports) => {\n            const newReports = reports.map(report => {\n                //let [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n                const startMoment = moment(report.startTime);\n                const endMoment = moment(report.endTime);\n                const duration = moment.duration(endMoment.diff(startMoment))\n                const quarters = Math.round(duration.asHours() * 4)\n                report.quarters = quarters\n                return report\n            })\n            //console.log(reported)\n            console.log(newReports)\n            setReported([...reported, ...reports])\n        },\n        removeScheduledTime: ({ id }) => {\n            //[startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => !(time.id === id)))\n        },\n        removeReportedTime: ({ startTime, endTime, task }) => {\n            [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => time.startTime === startTime && time.endTime === endTime && time.task === task))\n        },\n        getReportedTimesBasedOnTask:() => {\n            // Get reported time grouped on a task basis\n            const grouped = d3.rollup(reported, v => d3.sum(v, d=>d.quarters), d => d.task )\n            console.log(grouped)\n            return grouped;\n        }\n\n    };\n    return (\n        <TimeContext.Provider value={provided}>\n            {props.children}\n        </TimeContext.Provider>\n    );\n};\n\nexport default TimeProvider;","import React, {useState} from 'react';\nimport './ScheduleComponent.css';\nimport {Input, Button} from 'antd';\n\nconst TaskScheduleComponent = ({addTime, task, inputHours}) => {\n    const [hours, setHours] = useState(inputHours)\n\n    return (\n        <div className=\"schedule-task-container\">\n            \n            <div>\n                {task}\n            </div>\n            <div>\n                <Input onChange={(e) => {\n                    setHours(e.target.value)\n                    addTime(task, e.target.value)\n                }} min={0} defaultValue={hours} style={{width:\"5rem\"}}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default TaskScheduleComponent;","\nimport React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Divider, Table } from 'antd'\nimport tasks from '../Data/tasks';\nimport TaskScheduleComponent from './TaskScheduleComponent';\nimport './ScheduleComponent.css';\nimport {\n    UpOutlined,\n    DownOutlined\n} from '@ant-design/icons'\n\nconst ScheduleComponent = () => {\n    const {scheduled} = useContext(TimeContext)\n    const [localScheduled, setLocalScheduled] = useState(scheduled)\n    const [hiddenState, setHiddenState] = useState(\n        Object.keys(tasks).reduce((obj, category) => ({\n            ...obj,\n            [category]: false\n        }), {})\n    )\n\n    const deliverables = [\n        {\n            key: '1',\n            name: 'Visualizing Group Matching',\n            grade: \"10%\",\n            type: \"Individual\",\n            dueDate: \"Jan 20\"\n        },\n        {\n            key: '2',\n            name: 'World values survey visualization',\n            grade: \"30%\",\n            type: \"Individual\",\n            dueDate: \"Jan 29\"\n        },\n        {\n            key: '3',\n            name: 'Project proposal',\n            grade: \"10%\",\n            type: \"Group\",\n            dueDate: \"Feb 8\"\n        },\n        {\n            key: '4',\n            name: 'Hello world demo',\n            grade: \"15%\",\n            type: \"Group\",\n            dueDate: \"Feb 14\"\n        }\n    ]\n\n    const columns = [\n        {\n            title: \"Assignment\",\n            dataIndex: \"name\",\n            key: \"name\"\n        },\n        {\n            title: \"Type\",\n            dataIndex: \"type\",\n            key: \"type\"\n        },\n        {\n            title: \"Grade %\",\n            dataIndex: \"grade\",\n            key: \"grade\"\n        },\n        {\n            title: \"Due date\",\n            dataIndex: \"dueDate\",\n            key: \"dueDate\"\n        }\n    ]\n\n    const onChangeSchedule = (task, hours) => {\n        const index = localScheduled.findIndex(item => item.task === task)\n        console.log(index)\n        if (index >= 0) {\n            //task is already scheduled, change it\n            const newScheduleItem = {\n                ...localScheduled[index],\n                hours: hours\n            }\n            let scheduleCopy = [...localScheduled]\n            scheduleCopy[index] = newScheduleItem\n            setLocalScheduled(scheduleCopy)\n        }\n        else {\n            const newScheduleItem = {\n                hours: hours,\n                task: task\n            }\n            setLocalScheduled([...localScheduled, newScheduleItem])\n        }\n    }\n\n    const getScheduledTimeForTask = (task, scheduledTimes) => {\n        const scheduledObj = scheduledTimes.find(time => time.task === task)\n        return scheduledObj ? scheduledObj.hours : 0\n    }\n\n\n    return (<div>\n        <div className=\"container\">\n            <div className=\"schedule-container\">\n                <h3>Plan your learning for the week</h3>\n                <TimeContext.Consumer>\n                    {({ scheduled, addScheduledTime, removeScheduledTime }) => (\n                        <div>\n                            {\n                                // scheduled.map(scheduleTime => (<div>\n                                //     <p>{scheduleTime.task}</p>\n                                //     <p>{scheduleTime.quarters} quarters.</p>\n                                //     <button onClick={() => removeScheduledTime({id: scheduleTime.id})}>Remove task from schedule</button>\n                                // </div>))\n                            }\n                            <div>\n                                {Object.keys(tasks).map(category => (\n                                    <div className=\"planner-container\">\n                                        <div className=\"category-name\" onClick={() => setHiddenState({ ...hiddenState, [category]: !hiddenState[category] })}>\n                                            <h2 >{category}</h2>\n                                            <div >\n                                                {hiddenState[category] ? <UpOutlined /> : <DownOutlined />}\n                                            </div>\n                                        </div>\n                                        { hiddenState[category] && (\n                                            <div>\n                                                <div className=\"schedule-task-container\">\n                                                    <span>\n                                                        <strong>Task</strong>\n                                                    </span>\n                                                    <span>\n                                                        <strong>Planned Time</strong>\n                                                    </span>\n                                                </div>\n                                                {tasks[category].map(task => (\n                                                    <TaskScheduleComponent addTime={onChangeSchedule} task={task} inputHours={getScheduledTimeForTask(task, scheduled)} />\n                                                ))}\n                                            </div>)}\n                                        <Divider />\n\n                                    </div>\n                                ))}\n                                <Button type=\"primary\" onClick={() => addScheduledTime(localScheduled)}>Save Planning</Button>\n                            </div>\n                        </div>\n                    )}\n\n                </TimeContext.Consumer>\n            </div>\n            <div className=\"deliverables-container\">\n                <h3>Course assignments</h3>\n                <Table dataSource={deliverables} columns={columns} />\n            </div>\n        </div>\n    </div >\n    );\n}\nexport default ScheduleComponent;","import { getDefaultNormalizer } from '@testing-library/react';\nimport React, { useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\n\nconst VizComponent = () => {\n    return(\n        <div>\n            <TimeContext.Consumer>\n                {({getReportedTimesBasedOnTask}) => (\n                    <>\n                    {getReportedTimesBasedOnTask()}\n                    </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n    )\n} \n\nexport default VizComponent;","import React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Calendar, Modal, Badge } from 'antd';\nimport { TimePicker, TreeSelect, Menu, Divider } from 'antd';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport { TreeNode } from 'antd/lib/tree-select';\nimport { Prompt } from 'react-router-dom'\n\nimport './ReportComponent.css'\nconst { RangePicker } = TimePicker;\nconst { SubMenu } = Menu;\nconst format = \"HH:mm\";\n\nconst DropdownMenu = ({ onTreeChange, value }) => (\n    <TreeSelect style={{ width: \"100%\" }} onChange={value => onTreeChange(value)} value={value}>\n        {Object.keys(tasks).map(cat => (\n            <TreeNode value={cat} title={cat} selectable={false}>\n                {tasks[cat].map(task => (\n                    <TreeNode value={task} title={task} />\n                ))}\n            </TreeNode>\n        ))}\n    </TreeSelect>\n)\n\nconst ReportComponent = () => {\n    const [showModal, setShowModal] = useState(false)\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [reports, setReports] = useState([])\n    const [rollingIdx, setRollingIdx] = useState(0);\n    const { reported } = useContext(TimeContext);\n    const onDateSelect = (date) => {\n        setSelectedDate(date.toDate())\n        setShowModal(true);\n    }\n\n    const onOk = () => {\n        setShowModal(false)\n    }\n\n    const onCancel = () => {\n        setShowModal(false)\n    }\n\n    const changeTaskTime = (id, startTime, endTime) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            startTime,\n            endTime\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const changeReportTask = (id, task) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            task: task\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const getReportsFordate = (reports, date) => {\n        const momentDate = moment(date)\n        let reportsForDate = reports.filter(report => (report.startTime === null) || (moment(report.startTime).isSame(momentDate, 'day')))\n\n        // if(reportsForDate.length === 0){\n        //     const newReport = {id: rollingIdx+1, startTime: date, endTime: date}\n        //     setReports([...reports, newReport])\n        //     setRollingIdx(rollingIdx+1)\n        //     reportsForDate = [newReport]\n        // }\n        return reportsForDate;\n    }\n\n    const onAddTask = (date) => {\n        setReports([...reports, { id: rollingIdx + 1, startTime: date, endTime: date }])\n        setRollingIdx(rollingIdx + 1);\n    }\n\n    const dateCellRender = (value) => {\n        const reportsForDate = getReportsFordate([...reported, ...reports], value.toDate());\n        reportsForDate.sort((a, b) => a.startTime - b.startTime)\n        //if i sort in a lambda i won't need to write documentation, yeehaw!\n        return (<ul className=\"events\">\n            {reportsForDate.map(report => <li >\n                <div style={{ display: \"block\", backgroundColor: \"green\", color: \"white\", marginBottom: \"0.05rem\", borderRadius: \"5%\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                    {`${moment(report.startTime).format(\"HH:mm\")}: ${report.task}`}\n                </div>\n                {/* <Badge text={`${moment(report.startTime).format(\"HH:mm\")}: ${report.task}`} status={'success'}/> */}\n            </li>)}\n        </ul>\n        )\n    }\n\n    return (<div>\n        <div className=\"calendar-container\">\n            <h3>This is where you report time worked</h3>\n            <Prompt when={reports.length > 0} message=\"You have unsaved changes! Are you sure you want to leave?\" />\n            <TimeContext.Consumer>\n                {({ reported, addReportedTime }) => (<>\n                    <Calendar onSelect={onDateSelect} dateCellRender={dateCellRender} />\n                    <Modal visible={showModal}\n                        onCancel={onCancel}\n                        onOk={onOk}\n                    >\n                        <h2>{selectedDate.toLocaleDateString()}</h2>\n                        {getReportsFordate([...reported, ...reports], selectedDate).map(report => (\n                            <>\n                                <RangePicker format={format} style={{ width: \"100%\" }} onChange={(dates, garbage) => changeTaskTime(report.id, dates[0].toDate(), dates[1].toDate())}\n                                    value={report.startTime ? [moment(report.startTime), moment(report.endTime)] : [null, null]} />\n                                <DropdownMenu onTreeChange={value => changeReportTask(report.id, value)} value={report.task} />\n                                <Divider />\n                            </>\n                        ))\n                        }\n                        <Button onClick={() => onAddTask(selectedDate)}>Add task</Button>\n                    </Modal>\n                    <Button className=\"fixed-button\" type=\"primary\" onClick={() => { addReportedTime(reports); setReports([]) }}>Save report</Button>\n                </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n    </div >\n    );\n}\nexport default ReportComponent;","import logo from './logo.svg';\nimport TimeProvider from './Contexts/TimeContext';\nimport './App.css';\nimport ScheduleComponent from './Components/ScheduleComponent';\nimport VizComponent from './Components/VizView';\nimport ReportComponent from './Components/ReportComponent';\nimport { Menu } from 'antd';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <Router basename=\"/\">\n      <TimeProvider>\n        <div className=\"App\">\n          <div className=\"app-container\">\n            <div className=\"sidebar\">\n              <h2>Time reporter</h2>\n              <Menu mode=\"inline\"\n              style={{height:\"100%\"}}>\n                <Menu.Item key=\"1\">\n                  <Link to={\"/\"}>Home</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={\"/schedule\"}>Schedule</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={\"/report\"}>Report time worked</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={\"/viz\"}>Visualizations</Link>\n                </Menu.Item>\n              </Menu>\n              {/* <nav>\n                <ul>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                </ul>\n              </nav> */}\n            </div>\n            <div className=\"main-content\">\n              <Switch>\n                <Route path={\"/schedule\"}>\n                  <ScheduleComponent />\n                </Route>\n                <Route path={\"/viz\"}>\n                  <VizComponent />\n                </Route>\n                <Route path={\"/report\"}>\n                  <ReportComponent />\n                </Route>\n                <Route path={\"/\"}>\n                  <ScheduleComponent /> {/*If we create a landing page, this should lead there*/}\n                </Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </TimeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}