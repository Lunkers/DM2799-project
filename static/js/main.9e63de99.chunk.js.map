{"version":3,"sources":["logo.svg","Data/tasks.js","Contexts/TimeContext.js","Components/TaskScheduleComponent.jsx","Components/ScheduleComponent.jsx","Components/BarChart.jsx","Components/SunburstComponent.jsx","Components/LoadingBarComponent.jsx","Components/VizView.jsx","Components/likert-component.jsx","Components/ReportComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["tasks","Research","Design","Programming","Testing","TimeContext","React","createContext","TimeProvider","props","useState","scheduled","setScheduled","reported","setReported","provided","addScheduledTime","schedule","scheduledWork","map","item","hours","task","quarters","addReportedTime","reports","newReports","report","startMoment","moment","startTime","endMoment","endTime","duration","diff","Math","round","asHours","removeScheduledTime","id","filter","time","removeReportedTime","getReportedTimesBasedOnTask","grouped","d3","v","d","console","log","getReportedAndScheduledReduced","type","r","s","getTaskBasedScheduledAndReported","groupedScheduled","Object","fromEntries","groupedReported","reportedOrScheduledTasks","Set","keys","groupedCompArr","Provider","value","children","TaskScheduleComponent","addTime","inputHours","setHours","className","onChange","e","target","min","defaultValue","style","width","ScheduleComponent","useContext","localScheduled","setLocalScheduled","reduce","obj","category","hiddenState","setHiddenState","onChangeSchedule","index","findIndex","newScheduleItem","scheduleCopy","getScheduledTimeForTask","scheduledTimes","scheduledObj","find","Consumer","onClick","message","success","UpOutlined","DownOutlined","dataSource","key","name","grade","dueDate","columns","title","dataIndex","BarChart","categoriesByTask","entries","flatMap","categoryTask","SunburstComponent","widthHeightValue","data","margin","height","Array","from","container","idMapping","acc","el","i","d3Container","useRef","useEffect","current","radius","color","selectAll","remove","g","append","attr","partition","size","PI","root","sum","arc","startAngle","x0","endAngle","x1","innerRadius","y0","outerRadius","y1","descendants","enter","depth","parent","ref","LoadingBarComponent","stacked","text","loadingBarContainer","scheduledData","reportedData","svg","scale","domain","range","axis","ticks","t","tickFormat","call","VizComponent","length","LikertScaleComponent","question","score","selected","setSelected","FrownOutlined","fontSize","MehOutlined","SmileOutlined","RangePicker","TimePicker","DropdownMenu","Menu","SubMenu","onTreeChange","cat","selectable","ReportComponent","showModal","setShowModal","Date","selectedDate","setSelectedDate","setReports","rollingIdx","setRollingIdx","onDateSelect","date","toDate","reportedWithId","idx","onOk","onCancel","getReportsFordate","momentDate","isSame","dateCellRender","reportsForDate","sort","a","b","display","backgroundColor","marginBottom","borderRadius","whiteSpace","textOverflow","overflow","format","onSelect","visible","toLocaleDateString","dates","garbage","newReport","reportCopy","changeTaskTime","changeReportTask","changeReportReflection","App","basename","mode","defaultSelectedKeys","Item","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e63de99.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\nconst tasks = {\n    \"Project Management\": [\n        \"Coordinated Meetings\",\n        \"Created Slides\",\n        \"Presented\",\n        \"Met with partners to discuss offers\",\n        \"Coordinated Communication\",\n        \"Managed the project\"\n    ],\n    Research:[\n        \"Researched related work\",\n        \"Brainstorming\",\n        \"Researched Tools\",\n        \"Worked out the mathematics and statistics\",\n        \"Researched API to raw data\",\n\n    ],\n    \"Data Management\":[\n        \"Gathered raw data\",\n        \"Processed raw data\",\n        \"Created data model\"\n    ],\n    Design: [\n        \"Designed visual structures\",\n        \"Created visual designs and aestethics\",\n        \"Designed visual mappings\",\n        \"Designed view transformations\",\n    ],\n    Programming: [\n        \"Created webpage\",\n        \"Programmed front end\",\n        \"Programmed back end\",\n        \"Maintained the Github repository\",\n    ],\n    Testing: [\n        \"Tested visual structures\",\n        \"Tested view transformations\",\n    ],\n    \"User Testing\": [\n        \"Recruited participants for user testing\",\n        \"Designed user tests\",\n        \"Executed user tests\"\n    ]\n}\nexport default tasks","import React, { useState } from 'react';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport const TimeContext = React.createContext()\n\nfunction TimeProvider(props) {\n    //some default states for testing purposes\n    const [scheduled, setScheduled] = useState([])\n    const [reported, setReported] = useState([])\n    const [index, setIndex] = useState(1);\n\n    const provided = {\n        scheduled,\n        reported,\n        addScheduledTime: (schedule) => {\n            const scheduledWork = schedule.map(item => ({\n                hours: item.hours,\n                task: item.task,\n                quarters: item.hours * 4\n            }))\n            setScheduled(scheduledWork) //overwrite at the moment, why the fuck not?\n            //setIndex(index + 1);\n        },\n        addReportedTime: (reports) => {\n            const newReports = reports.map(report => {\n                //let [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n                const startMoment = moment(report.startTime);\n                const endMoment = moment(report.endTime);\n                const duration = moment.duration(endMoment.diff(startMoment))\n                const quarters = Math.round(duration.asHours() * 4)\n                report.quarters = quarters\n                return report\n            })\n            //console.log(reported)\n            setReported(newReports)\n        },\n        removeScheduledTime: ({ id }) => {\n            //[startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => !(time.id === id)))\n        },\n        removeReportedTime: ({ startTime, endTime, task }) => {\n            [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => time.startTime === startTime && time.endTime === endTime && time.task === task))\n        },\n        getReportedTimesBasedOnTask:() => {\n            // Get reported time grouped on a task basis\n            const grouped = d3.rollup(reported, v => d3.sum(v, d=>d.quarters), d => d.task )\n            console.log(grouped)\n            return grouped;\n        },\n        getReportedAndScheduledReduced:() =>{\n            const reportedSum = d3.sum(reported, r => r.quarters)\n            const scheduledSum = d3.sum(scheduled, s => s.quarters)\n\n            return {reported: {type: \"Reported\", quarters: reportedSum}, scheduled: {type: \"Scheduled\", quarters: scheduledSum}}\n        },\n        getTaskBasedScheduledAndReported:() => {\n            const groupedScheduled = Object.fromEntries(d3.rollup(scheduled, v => d3.sum(v, d=>d.quarters), d => d.task))\n            const groupedReported = Object.fromEntries(d3.rollup(reported, v => d3.sum(v, d=>d.quarters), d => d.task))\n            const reportedOrScheduledTasks = new Set([...Object.keys(groupedReported), ...Object.keys(groupedScheduled)])\n            \n            const groupedCompArr = [...reportedOrScheduledTasks].map(v => ({\n                task: v, \n                reported: groupedReported[v] ? groupedReported[v] : 0,\n                scheduled: groupedScheduled[v] ? groupedScheduled[v] : 0\n            }))\n            console.log(groupedCompArr)\n            return groupedCompArr\n        }\n\n    };\n    return (\n        <TimeContext.Provider value={provided}>\n            {props.children}\n        </TimeContext.Provider>\n    );\n};\n\nexport default TimeProvider;","import React, {useState} from 'react';\nimport './ScheduleComponent.css';\nimport {Input, Button} from 'antd';\n\nconst TaskScheduleComponent = ({addTime, task, inputHours}) => {\n    const [hours, setHours] = useState(inputHours)\n\n    return (\n        <div className=\"schedule-task-container\">\n            \n            <div>\n                {task}\n            </div>\n            <div>\n                <Input onChange={(e) => {\n                    setHours(e.target.value)\n                    addTime(task, e.target.value)\n                }} min={0} defaultValue={hours} style={{width:\"5rem\"}}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default TaskScheduleComponent;","\nimport React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Divider, Table, message, Affix } from 'antd'\nimport tasks from '../Data/tasks';\nimport TaskScheduleComponent from './TaskScheduleComponent';\nimport './ScheduleComponent.css';\nimport {\n    UpOutlined,\n    DownOutlined\n} from '@ant-design/icons'\n\nconst ScheduleComponent = () => {\n    const { scheduled } = useContext(TimeContext)\n    const [localScheduled, setLocalScheduled] = useState(scheduled)\n    const [hiddenState, setHiddenState] = useState(\n        Object.keys(tasks).reduce((obj, category) => ({\n            ...obj,\n            [category]: false,\n            \"Project Management\": true,\n        }), {})\n    )\n\n    const deliverables = [\n        {\n            key: '1',\n            name: 'Visualizing Group Matching',\n            grade: \"10%\",\n            type: \"Individual\",\n            dueDate: \"Jan 20\"\n        },\n        {\n            key: '2',\n            name: 'World values survey visualization',\n            grade: \"30%\",\n            type: \"Individual\",\n            dueDate: \"Jan 29\"\n        },\n        {\n            key: '3',\n            name: 'Project proposal',\n            grade: \"10%\",\n            type: \"Group\",\n            dueDate: \"Feb 8\"\n        },\n        {\n            key: '4',\n            name: 'Hello world demo',\n            grade: \"15%\",\n            type: \"Group\",\n            dueDate: \"Feb 14\"\n        }\n    ]\n\n    const columns = [\n        {\n            title: \"Assignment\",\n            dataIndex: \"name\",\n            key: \"name\"\n        },\n        {\n            title: \"Type\",\n            dataIndex: \"type\",\n            key: \"type\"\n        },\n        {\n            title: \"Grade %\",\n            dataIndex: \"grade\",\n            key: \"grade\"\n        },\n        {\n            title: \"Due date\",\n            dataIndex: \"dueDate\",\n            key: \"dueDate\"\n        }\n    ]\n\n    const onChangeSchedule = (task, hours) => {\n        const index = localScheduled.findIndex(item => item.task === task)\n        console.log(index)\n        if (index >= 0) {\n            //task is already scheduled, change it\n            const newScheduleItem = {\n                ...localScheduled[index],\n                hours: hours\n            }\n            let scheduleCopy = [...localScheduled]\n            scheduleCopy[index] = newScheduleItem\n            setLocalScheduled(scheduleCopy)\n        }\n        else {\n            const newScheduleItem = {\n                hours: hours,\n                task: task\n            }\n            setLocalScheduled([...localScheduled, newScheduleItem])\n        }\n    }\n\n    const getScheduledTimeForTask = (task, scheduledTimes) => {\n        const scheduledObj = scheduledTimes.find(time => time.task === task)\n        return scheduledObj ? scheduledObj.hours : 0\n    }\n\n\n    return (<div>\n        <div className=\"container\">\n            <div className=\"schedule-container\">\n                <h1>Plan your learning for the week</h1>\n\n                <TimeContext.Consumer>\n                    {({ scheduled, addScheduledTime, removeScheduledTime }) => (\n                        <div>\n                            <div className=\"save-btn\">\n                                <Button type=\"primary\" className=\"save-btn\" onClick={() => {\n                                    message.success(\"Saved task planning!\")\n                                    addScheduledTime(localScheduled)\n                                }}>Save Planning</Button>\n                            </div>\n\n                            {\n                                // scheduled.map(scheduleTime => (<div>\n                                //     <p>{scheduleTime.task}</p>\n                                //     <p>{scheduleTime.quarters} quarters.</p>\n                                //     <button onClick={() => removeScheduledTime({id: scheduleTime.id})}>Remove task from schedule</button>\n                                // </div>))\n                            }\n                            <div>\n                                {Object.keys(tasks).map(category => (\n                                    <div className=\"planner-container\">\n                                        <div className=\"category-name\" onClick={() => setHiddenState({ ...hiddenState, [category]: !hiddenState[category] })}>\n                                            <h3 >{category}</h3>\n                                            <div >\n                                                {hiddenState[category] ? <UpOutlined /> : <DownOutlined />}\n                                            </div>\n                                        </div>\n                                        { hiddenState[category] && (\n                                            <div>\n                                                <div className=\"schedule-task-container\">\n                                                    <span>\n                                                        <strong>Task</strong>\n                                                    </span>\n                                                    <span>\n                                                        <strong>Estimated Time (Hours)</strong>\n                                                    </span>\n                                                </div>\n                                                {tasks[category].map(task => (\n                                                    <TaskScheduleComponent addTime={onChangeSchedule} task={task} inputHours={getScheduledTimeForTask(task, scheduled)} />\n                                                ))}\n                                            </div>)}\n                                        <Divider />\n\n                                    </div>\n                                ))}\n\n                            </div>\n\n                        </div>\n                    )}\n\n                </TimeContext.Consumer>\n            </div>\n            <div className=\"deliverables-container\">\n                <h1>Course deliverables</h1>\n                <Table dataSource={deliverables} columns={columns} />\n            </div>\n        </div>\n    </div >\n    );\n}\nexport default ScheduleComponent;","import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction BarChart({ data }) {\n  const ref = useD3(\n    (svg) => {\n      const height = 500;\n      const width = 500;\n      const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n      const x = d3\n        .scaleBand()\n        .domain(data.map((d) => d.year))\n        .rangeRound([margin.left, width - margin.right])\n        .padding(0.1);\n\n      const y1 = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, (d) => d.sales)])\n        .rangeRound([height - margin.bottom, margin.top]);\n\n      const xAxis = (g) =>\n        g.attr(\"transform\", `translate(0,${height - margin.bottom})`).call(\n          d3\n            .axisBottom(x)\n            .tickValues(\n              d3\n                .ticks(...d3.extent(x.domain()), width / 40)\n                .filter((v) => x(v) !== undefined)\n            )\n            .tickSizeOuter(0)\n        );\n\n      const y1Axis = (g) =>\n        g\n          .attr(\"transform\", `translate(${margin.left},0)`)\n          .style(\"color\", \"steelblue\")\n          .call(d3.axisLeft(y1).ticks(null, \"s\"))\n          .call((g) => g.select(\".domain\").remove())\n          .call((g) =>\n            g\n              .append(\"text\")\n              .attr(\"x\", -margin.left)\n              .attr(\"y\", 10)\n              .attr(\"fill\", \"currentColor\")\n              .attr(\"text-anchor\", \"start\")\n              .text(data.y1)\n          );\n\n      svg.select(\".x-axis\").call(xAxis);\n      svg.select(\".y-axis\").call(y1Axis);\n\n      svg\n        .select(\".plot-area\")\n        .attr(\"fill\", \"steelblue\")\n        .selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) => x(d.year))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", (d) => y1(d.sales))\n        .attr(\"height\", (d) => y1(0) - y1(d.sales));\n    },\n    [data.length]\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"0px\",\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default BarChart;","import { useD3 } from '../hooks/useD3';\nimport React, { component, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport tasks from '../Data/tasks'\n\nconst categoriesByTask = Object.fromEntries(\n  Object\n    .entries(tasks)\n    .flatMap(([category, categoryTasks]) => categoryTasks.map(categoryTask => [categoryTask, category]))\n);\n\nconst transitionDuration = 900;\n\nconst SunburstComponent = ({widthHeightValue = 300, data}) => {\n\n\tconst margin = { top: 50, right: 0, bottom: 0, left: 0 };\n\tconst width = widthHeightValue - margin.left - margin.right - margin.top;\n    const height = widthHeightValue - margin.top - margin.bottom;\n\n    data = Array.from(data, ([key, value]) => ({key,value}));\n    data = data.map(d => {\n    \tconst container = {}\n\n    \tcontainer.key = d.key;\n    \tcontainer.value = d.value;\n    \tcontainer.category = categoriesByTask[d.key];\n\n    \treturn container;\n    });\n\n    console.log(\"testing data\");\n    console.log(data);\n\n    const idMapping = data.reduce((acc, el, i) => {\n  \t\t\t\tacc[el.key] = i;\n  \t\t\t\treturn acc;\n\t\t\t}, {});\n\t\n\tconsole.log(\"idmap\");\n\tconsole.log(idMapping);\n\n\t/*let root;\n\tdata.forEach(el => {\n \t\t // Handle the root element\n  \t\tif (el.parentId === null) {\n    \t\troot = el;\n    \t\treturn;\n  \t\t}\n  \t\t// Use our mapping to locate the parent element in our data array\n  \t\tconst parentEl = data[idMapping[el.parentId]];\n  \t\t// Add our current el to its parent's `children` array\n  \t\tparentEl.children = [...(parentEl.children || []), el];\n\t});\n\n\tconsole.log(root);*/\n\n\t/*const dataPerCategory = data.reduce((acc, {key, value}) => {\n\t\t\t\t  const category = categoriesByTask[key];\n\t\t\t\t  if{}\n\t\t\t\t}, {});\n\n\tconst taskPerCategory = data.reduce((acc, {key, value}) => {\n\t\t\t\t  const category = categoriesByTask[key]\n\t\t\t\t  return {\n\t\t\t\t  \t[category]: category,\n\t\t\t\t  \t[taskList]: \n\t\t\t\t  };\n\t\t\t\t}, {});\n\n\tconsole.log(taskPerCategory);*/\n\n    let d3Container = useRef(null);\n\n    useEffect (( ) => {\n    \t    if(data && d3Container.current) {\n    \t    \t/**/\n\n    \t    \t// JSON data\n\t\t\t    const nodeData = {\n\t\t\t        \"name\": \"TOPICS\", \"children\": [{\n\t\t\t            \"name\": \"Topic A\",\n\t\t\t            \"children\": [{\"name\": \"Sub A1\", \"size\": 4}, {\"name\": \"Sub A2\", \"size\": 4}]\n\t\t\t        }, {\n\t\t\t            \"name\": \"Topic B\",\n\t\t\t            \"children\": [{\"name\": \"Sub B1\", \"size\": 3}, {\"name\": \"Sub B2\", \"size\": 3}, {\n\t\t\t                \"name\": \"Sub B3\", \"size\": 3}]\n\t\t\t        }, {\n\t\t\t            \"name\": \"Topic C\",\n\t\t\t            \"children\": [{\"name\": \"Sub A1\", \"size\": 4}, {\"name\": \"Sub A2\", \"size\": 4}]\n\t\t\t        }]\n\t\t\t    };\n\n\t\t\t    // constiables\n\t\t\t    const radius = Math.min(width, height) / 2 ;\n\t\t\t    const color = d3.scaleOrdinal([\"#f7fbff\",\"#f6faff\",\"#f5fafe\",\"#f5f9fe\",\"#f4f9fe\",\"#f3f8fe\"]);\n\n\t\t\t    // Create primary <g> element\n\t\t\t    d3.select(d3Container.current).selectAll('*').remove();\n\t\t\t    const svg = d3.select(d3Container.current)\n\t\t\t  \t\t\t.append(\"svg\")\n\t\t\t    \t\t.attr(\"width\", width)\n\t\t\t    \t\t.attr(\"height\", height);\n\n\t\t\t    const g = svg.append('g')\n\t\t\t        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');\n\n\t\t\t    // Data strucure\n\t\t\t    const partition = d3.partition()\n\t\t\t        .size([2 * Math.PI, radius]);\n\n\t\t\t    // Find data root\n\t\t\t    const root = d3.hierarchy(nodeData)\n\t\t\t        .sum(function (d) { return d.size});\n\n\t\t\t    // Size arcs\n\t\t\t    partition(root);\n\t\t\t    const arc = d3.arc()\n\t\t\t        .startAngle(function (d) { return d.x0 })\n\t\t\t        .endAngle(function (d) { return d.x1 })\n\t\t\t        .innerRadius(function (d) { return d.y0 })\n\t\t\t        .outerRadius(function (d) { return d.y1 });\n\n\t\t\t    // Put it all together\n\t\t\t    g.selectAll('path')\n\t\t\t        .data(root.descendants())\n\t\t\t        .enter().append('path')\n\t\t\t        .attr(\"display\", function (d) { return d.depth ? null : \"none\"; })\n\t\t\t        .attr(\"d\", arc)\n\t\t\t        .style('stroke', '#fff')\n\t\t\t        .style(\"fill\", function (d) { return color((d.children ? d : d.parent).data.name); });\n\n        \t\t/*const radius = Math.min(width, height) / 2 ;\n\n\t\t\t\td3.select(d3Container.current).selectAll('*').remove();\n\t\t    \tconst svg = d3.select(d3Container.current)\n\t\t\t  \t\t\t.append(\"svg\")\n\t\t\t    \t\t.attr(\"width\", width)\n\t\t\t    \t\t.attr(\"height\", height);\n\n\t\t\t    const g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n\t\t\t    const color = d3.scaleOrdinal()\n  \t\t\t\t\t\t\t\t.domain(data)\n\t\t\t\t\t\t\t\t.range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"])\n\n\t\t  \t\tconst pie = d3.pie().value(d => d.value);\n\n\t\t  \t\tconst arcGenerator = d3.arc()\n  \t\t\t\t\t.innerRadius(0)\n  \t\t\t\t\t.outerRadius(radius)\n\n\t\t  \t\tconst arc = d3.arc()\n\t\t                .innerRadius(radius * 0.5)\n\t\t                .outerRadius(radius);\n\n\t\t        const outerArc = d3.arc()\n  \t\t\t\t\t.innerRadius(radius * 0.9)\n  \t\t\t\t\t.outerRadius(radius * 0.9);\n\n\t\t        const arcData = pie(data);       \n\t\t        \n\t\t        const arcs = g.selectAll(\"path\")\n\t\t                .data(arcData)\n\t\t                .join(\"path\")\n\t\t                .attr(\"fill\", function(d){ return(color(d.data.key)) })\n\t\t                .attr(\"stroke\", \"white\")\n\t\t                .attr(\"d\",arc);*/\n\n\t\t\t\t/*svg.selectAll('mySlices')\n\t\t\t\t  .data(arcData)\n\t\t\t\t  .enter()\n\t\t\t\t  .append('text')\n\t\t\t\t  .text(d => \"Task: \" + d.key)\n\t\t\t\t  .attr(\"transform\", function(d) { return \"translate(\" + arcGenerator.centroid(d) + \")\";  })\n\t\t\t\t  .style(\"text-anchor\", \"middle\")\n\t\t\t\t  .style(\"font-size\", 17);*/\n\t\t        /*\n\t\t        \t\t.attr('points', function(d) {\n\t\t        \t\t\tconst posA = arc.centroid(d);\n\t\t        \t\t\tconst posB = outerArc.centroid(d);\n\t\t        \t\t\tconst posC = outerArc.centroid(d);\n\t\t        \t\t\tconst midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n\t\t        \t\t\tposC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : - 1);\n\t\t        \t\t\treturn [posA, posB, posC];\n\t\t        \t\t});\n\n\t\t        svg.selectAll('allLabels')\n  \t\t\t\t\t.data(data)\n  \t\t\t\t\t.enter()\n  \t\t\t\t\t.append('text')\n    \t\t\t\t\t.text( d => d.key )\n    \t\t\t\t\t.attr('transform', function(d) {\n        \t\t\t\t\tconst pos = outerArc.centroid(d);\n        \t\t\t\t\tconst midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n        \t\t\t\t\tpos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n        \t\t\t\t\treturn 'translate(' + pos + ')';\n    \t\t\t\t})\n    \t\t\t\t.style('text-anchor', function(d) {\n        \t\t\t\tconst midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n        \t\t\t\treturn (midangle < Math.PI ? 'start' : 'end');\n    \t\t\t\t});*/\n\n\t\t        /*const newarc = d3.arc()\n\t\t        \t\t\t\t.innerRadius(2 * radius / 3)\n\t\t        \t\t\t\t.outerRadius(radius);\n\n\t\t        arcs.append(\"text\")\n\t\t        \t.attr(\"transform\", d => {\n\t\t        \t\treturn \"translate(\" + newarc.centroid(d) + \")\";\n\t\t        \t})\n\t\t        \t.attr(\"text-anchor\", \"middle\")\n\t\t        \t.attr(\"fill\", \"white\")\n\t\t        \t.text(d => d.key);*/\n    \t\t}\n    },[data, d3Container.current]);\n\n\n\n\n\treturn (\n  \t<div id=\"sunBurst\" ref={d3Container}>\n\n  \t</div>\n  );\n};\n\nexport default SunburstComponent;","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nconst LoadingBarComponent = ({ data, stacked = false, text }) => {\n    const width = 450\n    const height = 100;\n    const margin = { left: 10, right: 10, top: 10, bottom: 10 }\n    const [smallerName, setSmallerName] = useState('')\n    const [largerName, setLargerName] = useState('')\n\n    let propData = [{ type: \"Planned\", quarters: 10 }, { type: \"Reported\", quarters: 8 }]\n    let loadingBarContainer = useRef(null);\n\n    //render the chart\n    //we use useffect and ref to make d3 work\n    useEffect(() => {\n        //avoid null pointers\n        if (data && loadingBarContainer.current) {\n            console.log(data)\n            const scheduledData = data.scheduled;\n            const reportedData = data.reported\n\n            d3.select(loadingBarContainer.current).selectAll('*').remove()\n\n            const svg = d3.select(loadingBarContainer.current)\n                .append('svg')\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n            \n\n            const scale = d3.scaleLinear()\n                .domain([0, d3.max([scheduledData, reportedData]) + 2])\n                .range([margin.left, width - margin.right])\n\n            console.log(scale.domain()[1])\n            console.log('drawing larger bar')\n            const backgroundBar = svg\n                .append('rect')\n                .attr(\"class\", \"background-rect\")\n                .attr('x', scale(scale.domain()[0]))\n                .attr('y', margin.top)\n                .attr('height', height -  2 * margin.bottom - margin.top)\n                .attr('width', scale(scale.domain()[1]))\n                .style('fill', '#232931')\n\n            const smallerBar = svg.selectAll(null)\n                .data([reportedData])\n                .enter()\n                .append('rect')\n                .attr('x', scale(scale.domain()[0]))\n                .attr('y', margin.top)\n                .attr('height', height - 2*margin.bottom - margin.top)\n                .attr('width', d => scale(d))\n                .style('fill', '#A9D198')\n\n            console.log(scale(reportedData))\n            const axis = d3.axisBottom(scale)\n            console.log(scale.ticks().map(t => t/4))\n            axis.tickFormat(t => t % 4 == 0 ? t / 4 : \"\" )\n            \n            const drawnLine = svg.append('line')\n            .attr('x1', scale(scheduledData))\n            .attr('x2', scale(scheduledData))\n            .attr('y1', height - 2 * margin.bottom)\n            .attr('y2', margin.top)\n            .attr('stroke', () => scheduledData > reportedData ? 'red' : 'green')\n            .attr('stroke-width', 2)\n\n            const drawnAxis = svg.append('g')\n            .attr('transform', `translate(${0}, ${height -  2* margin.bottom})`)\n            .call(axis)\n\n        }\n    }, [loadingBarContainer.current]);\n\n    return (\n        <div>\n            <div className=\"loadingBar\" ref={loadingBarContainer}>\n\n            </div>\n        </div>\n    )\n\n}\n\nexport default LoadingBarComponent;","import { getDefaultNormalizer } from '@testing-library/react';\nimport React, { useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport BarChart from './BarChart';\nimport SunBurst from './SunburstComponent';\nimport LoadingBar from './LoadingBarComponent';\nimport './VizView.css'\nimport { Divider } from 'antd';\n\nconst VizComponent = () => {\n    return (\n        <div>\n            <h1>Visualizations</h1>\n            <TimeContext.Consumer>\n                {({ scheduled, reported, getReportedTimesBasedOnTask, getReportedAndScheduledReduced, getTaskBasedScheduledAndReported }) => (\n                    <>\n                        {(scheduled.length > 0 && reported.length > 0) ? (\n                            <div className=\"viz-container\">\n                                <div className=\"pie-container\">\n                                    <SunBurst data={getReportedTimesBasedOnTask()} />\n                                </div>\n                                <div className=\"loading-container\">\n                                    <h2>Time worked (hours)</h2>\n                                    {getTaskBasedScheduledAndReported().map(report => (\n                                        <>\n                                        <p><strong>\n                                            {report.task}\n                                            </strong></p>\n                                        <LoadingBar data={report}/>\n                                        <Divider/>\n                                        </>\n                                    ))}\n                                </div>\n                            </div>)\n                            : (\n                                <p>You need to schedule and report work to see charts!</p>\n                            )}\n                    </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n    )\n}\n\nexport default VizComponent;","import React, { useState } from 'react';\nimport { SmileOutlined, MehOutlined, FrownOutlined } from '@ant-design/icons';\nimport './likert-component.css';\nimport { color } from 'd3';\n\nconst LikertScaleComponent = ({ onChange, question, score }) => {\n    const [selected, setSelected] = useState(score);\n    return (\n        <div className=\"likert-container\">\n            <h3>{question}</h3>\n            <div className=\"emoji-container\">\n                <FrownOutlined style={{ fontSize: \"2rem\",  color:selected === -1 ? \"#005ccc\": \"#000\"}} onClick={() => {\n                    onChange(-1)\n                    setSelected(-1)}}/>\n                <MehOutlined style={{ fontSize: \"2rem\" , color:selected === 0 ? \"#005ccc\": \"#000\"}}  onClick={() => {\n                    onChange(0)\n                    setSelected(0)}}/>\n                <SmileOutlined style={{ fontSize: \"2rem\", color:selected === 1 ? \"#005ccc\": \"#000\"}}  onClick={() => {\n                    onChange(1)\n                    setSelected(1)}}/>\n            </div>\n        </div>\n    )\n}\n\nexport default LikertScaleComponent;","import React, { useContext, useEffect, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Calendar, Modal, message } from 'antd';\nimport { TimePicker, TreeSelect, Menu, Divider } from 'antd';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport { TreeNode } from 'antd/lib/tree-select';\nimport { Prompt } from 'react-router-dom'\nimport LikertScale from './likert-component';\n\nimport './ReportComponent.css'\nconst { RangePicker } = TimePicker;\nconst { SubMenu } = Menu;\nconst format = \"HH:mm\";\n\nconst DropdownMenu = ({ onTreeChange, value }) => (\n    <TreeSelect style={{ width: \"100%\" }} onChange={value => onTreeChange(value)} value={value}>\n        {Object.keys(tasks).map(cat => (\n            <TreeNode value={cat} title={cat} selectable={false}>\n                {tasks[cat].map(task => (\n                    <TreeNode value={task} title={task} />\n                ))}\n            </TreeNode>\n        ))}\n    </TreeSelect>\n)\n\nconst ReportComponent = () => {\n    const [showModal, setShowModal] = useState(false)\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [reports, setReports] = useState([])\n    const [rollingIdx, setRollingIdx] = useState(0);\n    const { reported, addReportedTime } = useContext(TimeContext);\n    const onDateSelect = (date) => {\n        setSelectedDate(date.toDate())\n        setShowModal(true);\n    }\n\n    useEffect(() => {\n        const reportedWithId = reported.map((report, idx) => ({ ...report, id: idx }))\n        setRollingIdx(reported.length);\n        setReports(reportedWithId);\n    }, [reported])\n\n    const onOk = () => {\n        addReportedTime(reports);\n        message.success(\"Report was saved!\")\n        setReports([])\n        setShowModal(false)\n    }\n\n    const onCancel = () => {\n        setShowModal(false)\n    }\n\n    const changeTaskTime = (id, startTime, endTime) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            startTime,\n            endTime\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const changeReportTask = (id, task) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            task: task\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const changeReportReflection = (id, score) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            score\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const getReportsFordate = (reports, date) => {\n        const momentDate = moment(date)\n        let reportsForDate = reports.filter(report => (report.startTime === null) || (moment(report.startTime).isSame(momentDate, 'day')))\n\n        // if(reportsForDate.length === 0){\n        //     const newReport = {id: rollingIdx+1, startTime: date, endTime: date}\n        //     setReports([...reports, newReport])\n        //     setRollingIdx(rollingIdx+1)\n        //     reportsForDate = [newReport]\n        // }\n        return reportsForDate;\n    }\n\n    const onAddTask = (date) => {\n        setReports([...reports, { id: rollingIdx + 1, startTime: date, endTime: date }])\n        setRollingIdx(rollingIdx + 1);\n    }\n\n    const dateCellRender = (value) => {\n        const reportsForDate = getReportsFordate([...reports], value.toDate());\n        reportsForDate.sort((a, b) => a.startTime - b.startTime)\n        //if i sort in a lambda i won't need to write documentation, yeehaw!\n        return (<ul className=\"events\">\n            {reportsForDate.map(report => <li >\n                <div style={{ display: \"block\", backgroundColor: \"green\", color: \"white\", marginBottom: \"0.05rem\", borderRadius: \"5%\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                    {`${moment(report.startTime).format(\"HH:mm\")}: ${report.task}`}\n                </div>\n                {/* <Badge text={`${moment(report.startTime).format(\"HH:mm\")}: ${report.task}`} status={'success'}/> */}\n            </li>)}\n        </ul>\n        )\n    }\n\n    return (<div className=\"report-component-container\">\n        <div className=\"calendar-container\">\n            <h1>Time reporting</h1>\n            <h3>Report your worked time here.</h3>\n            <TimeContext.Consumer>\n                {({ reported, addReportedTime }) => (<>\n                    <Calendar onSelect={onDateSelect} dateCellRender={dateCellRender} />\n                    <Modal visible={showModal}\n                        onCancel={onCancel}\n                        onOk={onOk}\n                    >\n                        <h2>{selectedDate.toLocaleDateString()}</h2>\n                        {getReportsFordate([...reports], selectedDate).map(report => (\n                            <>\n                                <RangePicker format={format} style={{ width: \"100%\" }} onChange={(dates, garbage) => changeTaskTime(report.id, dates[0].toDate(), dates[1].toDate())}\n                                    value={[moment(report.startTime), moment(report.endTime)]} />\n                                <DropdownMenu onTreeChange={value => changeReportTask(report.id, value)} value={report.task} />\n                                <Divider />\n                                <LikertScale question={\"How did it go?\"} onChange={(score) => changeReportReflection(report.id, score )} score={report.score}/>\n                                <Divider />\n                            </>\n                        ))\n                        }\n                        <Button onClick={() => onAddTask(selectedDate)}>Add task</Button>\n                    </Modal>\n                </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n        <Divider type=\"vertical\" className=\"vert-divider\" />\n        <div className=\"report-info\">\n            <h1>How to use:</h1>\n            <ul>\n                <li>\n                    Click on a date in the calendar\n                    </li>\n                <li>\n                    Report what times you worked on different learning tasks\n                    </li>\n                <li>\n                    Click \"Ok\" to save your report\n                    </li>\n            </ul>\n        </div>\n    </div >\n    );\n}\nexport default ReportComponent;","import logo from './logo.svg';\nimport TimeProvider from './Contexts/TimeContext';\nimport './App.css';\nimport ScheduleComponent from './Components/ScheduleComponent';\nimport VizComponent from './Components/VizView';\nimport ReportComponent from './Components/ReportComponent';\nimport { Menu } from 'antd';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <Router basename=\"/\">\n      <TimeProvider>\n        <div className=\"App\">\n          <div className=\"app-container\">\n            <div className=\"sidebar\">\n              <h1>Time reporter</h1>\n              <Menu mode=\"inline\"\n              defaultSelectedKeys={['1']}>\n                <Menu.Item key=\"1\">\n                  <Link to={\"/schedule\"}>Plan work</Link>\n                </Menu.Item>\n                <Menu.Item key=\"2\">\n                  <Link to={\"/report\"}>Report time worked</Link>\n                </Menu.Item>\n                <Menu.Item key=\"3\">\n                  <Link to={\"/viz\"}>Visualizations</Link>\n                </Menu.Item>\n              </Menu>\n              {/* <nav>\n                <ul>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                </ul>\n              </nav> */}\n            </div>\n            <div className=\"main-content\">\n              <Switch>\n                <Route path={\"/schedule\"}>\n                  <ScheduleComponent />\n                </Route>\n                <Route path={\"/viz\"}>\n                  <VizComponent />\n                </Route>\n                <Route path={\"/report\"}>\n                  <ReportComponent />\n                </Route>\n                <Route path={\"/\"}>\n                  <ScheduleComponent /> {/*If we create a landing page, this should lead there*/}\n                </Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </TimeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}