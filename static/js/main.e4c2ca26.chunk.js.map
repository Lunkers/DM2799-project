{"version":3,"sources":["logo.svg","Data/tasks.js","Contexts/TimeContext.js","Components/TaskScheduleComponent.jsx","Components/ScheduleComponent.jsx","Components/VizView.jsx","Components/ReportComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["tasks","Design","Programming","TimeContext","React","createContext","TimeProvider","props","useState","scheduled","setScheduled","reported","setReported","index","setIndex","provided","addScheduledTime","hours","task","quarters","id","addReportedTime","reports","newReports","map","report","endTime","startTime","console","log","removeScheduledTime","filter","time","removeReportedTime","Provider","value","children","TaskScheduleComponent","addTime","setHours","className","onChange","min","defaultValue","style","width","ScheduleComponent","Object","keys","reduce","obj","category","hiddenState","setHiddenState","Consumer","onClick","UpOutlined","DownOutlined","type","VizComponent","RangePicker","TimePicker","DropdownMenu","Menu","SubMenu","onTreeChange","cat","title","selectable","ReportComponent","showModal","setShowModal","Date","selectedDate","setSelectedDate","setReports","rollingIdx","setRollingIdx","onDateSelect","date","toDate","onOk","onCancel","getReportsFordate","momentDate","moment","isSame","dateCellRender","reportsForDate","onSelect","visible","toLocaleDateString","format","dates","garbage","idx","findIndex","newReport","reportCopy","changeTaskTime","changeReportTask","App","mode","height","Item","to","process","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4c2ca26.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\nconst tasks = {\n    Design: [\n        \"Designed visual structures\",\n        \"Created visual designs and aestethics\",\n        \"Designed visual mappings\",\n        \"Designed view transformations\"\n    ],\n    Programming: [\n        \"Created webpage\",\n        \"Programmed front end\",\n        \"Programmed back end\",\n        \"Processed raw data\"\n    ],\n}\nexport default tasks","import React, { useState } from 'react';\nimport tasks from '../Data/tasks';\n\nexport const TimeContext = React.createContext()\n\nfunction TimeProvider(props) {\n    //some default states for testing purposes\n    const [scheduled, setScheduled] = useState([])\n    const [reported, setReported] = useState([])\n    const [index, setIndex] = useState(1);\n\n    const provided = {\n        scheduled,\n        reported,\n        addScheduledTime: ({ hours, task }) => {\n            const quarters = hours * 4\n            setScheduled([...scheduled, {\n                quarters,\n                task,\n                id: index\n            }])\n            setIndex(index + 1);\n        },\n        addReportedTime: (reports) => {\n            const newReports = reports.map(report => {\n                //let [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n                const hours = (report.endTime - report.startTime) / 3.6e6 // get difference in hours between timestamps\n                const quarters = hours / 4\n                report.quarters = quarters\n                return report\n            })\n            //console.log(reported)\n            console.log(newReports)\n            setReported([...reported, ...reports])\n        },\n        removeScheduledTime: ({ id }) => {\n            //[startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => !(time.id === id)))\n        },\n        removeReportedTime: ({ startTime, endTime, task }) => {\n            [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => time.startTime === startTime && time.endTime === endTime && time.task === task))\n        }\n\n    };\n    return (\n        <TimeContext.Provider value={provided}>\n            {props.children}\n        </TimeContext.Provider>\n    );\n};\n\nexport default TimeProvider;","import React, {useState} from 'react';\nimport './ScheduleComponent.css';\nimport {Input, Button} from 'antd';\n\nconst TaskScheduleComponent = ({addTime, task}) => {\n    const [hours, setHours] = useState(0)\n\n    return (\n        <div className=\"schedule-task-container\">\n            \n            <div>\n                {task}\n            </div>\n            <div>\n                <Input onChange={setHours} min={0} defaultValue={hours} style={{width:\"5rem\"}}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default TaskScheduleComponent;","\nimport React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Divider } from 'antd'\nimport tasks from '../Data/tasks';\nimport TaskScheduleComponent from './TaskScheduleComponent';\nimport './ScheduleComponent.css';\nimport {\n    UpOutlined,\n    DownOutlined\n} from '@ant-design/icons'\n\nconst ScheduleComponent = () => {\n    const [hiddenState, setHiddenState] = useState(\n        Object.keys(tasks).reduce((obj, category) => ({\n            ...obj,\n            [category]: false\n        }), {})\n    )\n\n    return (<div>\n        <div>\n            <h2>What will you work on this week?</h2>\n            <TimeContext.Consumer>\n                {({ scheduled, addScheduledTime, removeScheduledTime }) => (\n                    <div>\n                        {\n                            // scheduled.map(scheduleTime => (<div>\n                            //     <p>{scheduleTime.task}</p>\n                            //     <p>{scheduleTime.quarters} quarters.</p>\n                            //     <button onClick={() => removeScheduledTime({id: scheduleTime.id})}>Remove task from schedule</button>\n                            // </div>))\n                        }\n                        <div>\n                            {Object.keys(tasks).map(category => (\n                                <div className=\"planner-container\">\n                                    <div className=\"category-name\">\n                                        <h2 >{category}</h2>\n                                        <div onClick={() => setHiddenState({ ...hiddenState, [category]: !hiddenState[category] })}>\n                                            {hiddenState[category] ? <UpOutlined /> : <DownOutlined />}\n                                        </div>\n                                    </div>\n                                    { hiddenState[category] && (\n                                        <div>\n                                            <div className=\"schedule-task-container\">\n                                                <span>\n                                                    <strong>Task</strong>\n                                                </span>\n                                                <span>\n                                                    <strong>Planned Time</strong>\n                                                </span>\n                                            </div>\n                                            {tasks[category].map(task => (\n                                                <TaskScheduleComponent addTime={addScheduledTime} task={task} />\n                                            ))}\n                                        </div>)}\n                                    <Divider />\n\n                                </div>\n                            ))}\n                            <Button type=\"primary\">Save Planning</Button>\n                        </div>\n                    </div>\n                )}\n\n            </TimeContext.Consumer>\n        </div>\n    </div >\n    );\n}\nexport default ScheduleComponent;","import { getDefaultNormalizer } from '@testing-library/react';\nimport React, { useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\n\nconst VizComponent = () => {\n    return(\n        <div>\n            <h2>Visualizations should go here</h2>\n            <div>\n                <p>Here we can visualize task distribution</p>\n            </div>\n            <div>\n                <p>Here we could show discrepancy between scheduled time and reported time?</p>\n            </div>\n            <div>\n                <p>Maybe a progress chart here?</p>\n            </div>\n        </div>\n    )\n} \n\nexport default VizComponent;","import React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Calendar, Modal } from 'antd';\nimport { TimePicker, TreeSelect, Menu, Divider} from 'antd';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport { TreeNode } from 'antd/lib/tree-select';\n\nimport './ReportComponent.css'\nconst { RangePicker } = TimePicker;\nconst { SubMenu } = Menu;\nconst format = \"HH:mm\";\n\nconst DropdownMenu = ({ onTreeChange, value }) => (\n    <TreeSelect style={{ width: \"100%\" }} onChange={value => onTreeChange(value)} value={value}>\n        {Object.keys(tasks).map(cat => (\n            <TreeNode value={cat} title={cat} selectable={false}>\n                {tasks[cat].map(task => (\n                    <TreeNode value={task} title={task} />\n                ))}\n            </TreeNode>\n        ))}\n    </TreeSelect>\n)\n\nconst ReportComponent = () => {\n    const [showModal, setShowModal] = useState(false)\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [reports, setReports] = useState([])\n    const [rollingIdx, setRollingIdx] = useState(0);\n    const onDateSelect = (date) => {\n        console.log(date.toDate())\n        setSelectedDate(date.toDate())\n        setShowModal(true);\n    }\n\n    const onOk = () => {\n        setShowModal(false)\n    }\n\n    const onCancel = () => {\n        setShowModal(false)\n    }\n\n    const changeTaskTime = (id, startTime, endTime) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            startTime,\n            endTime\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const changeReportTask = (id, task) => {\n        console.log(task)\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            task: task\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const getReportsFordate = (reports, date) => {\n        console.log(reports)\n        const momentDate = moment(date)\n        let reportsForDate = reports.filter(report => (report.startTime === null) || (moment(report.startTime).isSame(momentDate, 'day')))\n\n        // if(reportsForDate.length === 0){\n        //     const newReport = {id: rollingIdx+1, startTime: date, endTime: date}\n        //     setReports([...reports, newReport])\n        //     setRollingIdx(rollingIdx+1)\n        //     reportsForDate = [newReport]\n        // }\n        return reportsForDate;\n    }\n\n    const onAddTask = (date) => {\n        setReports([...reports, { id: rollingIdx + 1, startTime: date, endTime: date }])\n        setRollingIdx(rollingIdx + 1);\n    }\n\n    const dateCellRender = (value) => {\n        const reportsForDate = getReportsFordate(reports, value.toDate());\n        return (<ul>\n            {reportsForDate.map(report => <li>{report.task}</li>)}\n            </ul>\n        )\n    }\n\n    return (<div>\n        <div className=\"calendar-container\">\n            <p>This is where we let students report time worked</p>\n            <TimeContext.Consumer>\n                {({ reported, addReportedTime }) => (<>\n                    <Calendar onSelect={onDateSelect} dateCellRender={dateCellRender}/>\n                    <Modal visible={showModal}\n                        onCancel={onCancel}\n                        onOk={onOk}\n                    >\n                        <h2>{selectedDate.toLocaleDateString()}</h2>\n                        {getReportsFordate([...reported, ...reports], selectedDate).map(report => (\n                            <>\n                                <RangePicker format={format} style={{ width: \"100%\" }} onChange={(dates, garbage) => changeTaskTime(report.id, dates[0].toDate(), dates[1].toDate())}\n                                    value={report.startTime ? [moment(report.startTime), moment(report.endTime)] : [null, null]} />\n                                <DropdownMenu onTreeChange={value => changeReportTask(report.id, value)} value={report.task} />\n                                <Divider />\n                            </>\n                        ))\n                        }\n                        <Button onClick={() => onAddTask(selectedDate)}>Add task</Button>\n                    </Modal>\n                    <Button className=\"fixed-button\" type=\"primary\" onClick={() => addReportedTime(reports)}>Save report</Button>\n                </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n    </div >\n    );\n}\nexport default ReportComponent;","import logo from './logo.svg';\nimport TimeProvider from './Contexts/TimeContext';\nimport './App.css';\nimport ScheduleComponent from './Components/ScheduleComponent';\nimport VizComponent from './Components/VizView';\nimport ReportComponent from './Components/ReportComponent';\nimport { Menu } from 'antd';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <Router>\n      <TimeProvider>\n        <div className=\"App\">\n          <div className=\"app-container\">\n            <div className=\"sidebar\">\n              <h2>Time reporter</h2>\n              <Menu mode=\"inline\"\n              style={{height:\"100%\"}}>\n                <Menu.Item key=\"1\">\n                  <Link to={process.env.PUBLIC_URL + \"/\"}>Home</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={process.env.PUBLIC_URL +\"/schedule\"}>Schedule</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={process.env.PUBLIC_URL +\"/report\"}>Report time worked</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={process.env.PUBLIC_URL +\"/viz\"}>Visualizations</Link>\n                </Menu.Item>\n              </Menu>\n              {/* <nav>\n                <ul>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                </ul>\n              </nav> */}\n            </div>\n            <div className=\"main-content\">\n              <Switch>\n                <Route path={process.env.PUBLIC_URL +\"/schedule\"}>\n                  <ScheduleComponent />\n                </Route>\n                <Route path={process.env.PUBLIC_URL +\"/viz\"}>\n                  <VizComponent />\n                </Route>\n                <Route path={process.env.PUBLIC_URL +\"/report\"}>\n                  <ReportComponent />\n                </Route>\n                <Route path={process.env.PUBLIC_URL +\"/\"}>\n                  <ScheduleComponent /> {/*If we create a landing page, this should lead there*/}\n                </Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </TimeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}