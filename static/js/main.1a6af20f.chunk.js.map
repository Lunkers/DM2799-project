{"version":3,"sources":["logo.svg","Data/tasks.js","Contexts/TimeContext.js","Components/TaskScheduleComponent.jsx","Components/ScheduleComponent.jsx","Components/BarChart.js","Components/SunburstComponent.jsx","Components/LoadingBarComponent.jsx","Components/VizView.jsx","Components/ReportComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["tasks","Design","Programming","TimeContext","React","createContext","TimeProvider","props","useState","scheduled","setScheduled","reported","setReported","provided","addScheduledTime","schedule","scheduledWork","map","item","hours","task","quarters","addReportedTime","reports","newReports","report","startMoment","moment","startTime","endMoment","endTime","duration","diff","Math","round","asHours","console","log","removeScheduledTime","id","filter","time","removeReportedTime","getReportedTimesBasedOnTask","grouped","d3","v","d","getReportedAndScheduledReduced","type","r","s","Provider","value","children","TaskScheduleComponent","addTime","inputHours","setHours","className","onChange","e","target","min","defaultValue","style","width","ScheduleComponent","useContext","localScheduled","setLocalScheduled","Object","keys","reduce","obj","category","hiddenState","setHiddenState","onChangeSchedule","index","findIndex","newScheduleItem","scheduleCopy","getScheduledTimeForTask","scheduledTimes","scheduledObj","find","Consumer","onClick","UpOutlined","DownOutlined","dataSource","key","name","grade","dueDate","columns","title","dataIndex","BarChart","SunburstComponent","widthHeightValue","data","margin","height","d3Container","useRef","useEffect","current","Array","from","radius","selectAll","remove","g","append","attr","color","domain","range","pie","arc","innerRadius","outerRadius","arcData","arcs","join","newarc","centroid","text","ref","LoadingBarComponent","stacked","smallerName","setSmallerName","largerName","setLargerName","loadingBarContainer","sort","a","b","largerData","smallerData","svg","scale","enter","VizComponent","length","RangePicker","TimePicker","DropdownMenu","Menu","SubMenu","onTreeChange","cat","selectable","ReportComponent","showModal","setShowModal","Date","selectedDate","setSelectedDate","setReports","rollingIdx","setRollingIdx","onDateSelect","date","toDate","onOk","onCancel","getReportsFordate","momentDate","isSame","dateCellRender","reportsForDate","display","backgroundColor","marginBottom","borderRadius","whiteSpace","textOverflow","overflow","format","when","message","onSelect","visible","toLocaleDateString","dates","garbage","idx","newReport","reportCopy","changeTaskTime","changeReportTask","App","basename","mode","Item","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a6af20f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\nconst tasks = {\n    Design: [\n        \"Designed visual structures\",\n        \"Created visual designs and aestethics\",\n        \"Designed visual mappings\",\n        \"Designed view transformations\"\n    ],\n    Programming: [\n        \"Created webpage\",\n        \"Programmed front end\",\n        \"Programmed back end\",\n        \"Processed raw data\"\n    ],\n}\nexport default tasks","import React, { useState } from 'react';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport const TimeContext = React.createContext()\n\nfunction TimeProvider(props) {\n    //some default states for testing purposes\n    const [scheduled, setScheduled] = useState([])\n    const [reported, setReported] = useState([])\n    const [index, setIndex] = useState(1);\n\n    const provided = {\n        scheduled,\n        reported,\n        addScheduledTime: (schedule) => {\n            const scheduledWork = schedule.map(item => ({\n                hours: item.hours,\n                task: item.task,\n                quarters: item.hours * 4\n            }))\n            setScheduled(scheduledWork) //overwrite at the moment, why the fuck not?\n            //setIndex(index + 1);\n        },\n        addReportedTime: (reports) => {\n            const newReports = reports.map(report => {\n                //let [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n                const startMoment = moment(report.startTime);\n                const endMoment = moment(report.endTime);\n                const duration = moment.duration(endMoment.diff(startMoment))\n                const quarters = Math.round(duration.asHours() * 4)\n                report.quarters = quarters\n                return report\n            })\n            //console.log(reported)\n            console.log(newReports)\n            setReported([...reported, ...reports])\n        },\n        removeScheduledTime: ({ id }) => {\n            //[startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => !(time.id === id)))\n        },\n        removeReportedTime: ({ startTime, endTime, task }) => {\n            [startTime, endTime] = startTime < endTime ? [startTime, endTime] : [endTime, startTime] //make sure earliest time is always first\n            setScheduled(scheduled.filter(time => time.startTime === startTime && time.endTime === endTime && time.task === task))\n        },\n        getReportedTimesBasedOnTask:() => {\n            // Get reported time grouped on a task basis\n            const grouped = d3.rollup(reported, v => d3.sum(v, d=>d.quarters), d => d.task )\n            console.log(grouped)\n            return grouped;\n        },\n        getReportedAndScheduledReduced:() =>{\n            const reportedSum = d3.sum(reported, r => r.quarters)\n            const scheduledSum = d3.sum(scheduled, s => s.quarters)\n\n            return [{type: \"Reported\", quarters: reportedSum}, {type: \"Scheduled\", quarters: scheduledSum}]\n        }\n\n    };\n    return (\n        <TimeContext.Provider value={provided}>\n            {props.children}\n        </TimeContext.Provider>\n    );\n};\n\nexport default TimeProvider;","import React, {useState} from 'react';\nimport './ScheduleComponent.css';\nimport {Input, Button} from 'antd';\n\nconst TaskScheduleComponent = ({addTime, task, inputHours}) => {\n    const [hours, setHours] = useState(inputHours)\n\n    return (\n        <div className=\"schedule-task-container\">\n            \n            <div>\n                {task}\n            </div>\n            <div>\n                <Input onChange={(e) => {\n                    setHours(e.target.value)\n                    addTime(task, e.target.value)\n                }} min={0} defaultValue={hours} style={{width:\"5rem\"}}/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default TaskScheduleComponent;","\nimport React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Divider, Table } from 'antd'\nimport tasks from '../Data/tasks';\nimport TaskScheduleComponent from './TaskScheduleComponent';\nimport './ScheduleComponent.css';\nimport {\n    UpOutlined,\n    DownOutlined\n} from '@ant-design/icons'\n\nconst ScheduleComponent = () => {\n    const {scheduled} = useContext(TimeContext)\n    const [localScheduled, setLocalScheduled] = useState(scheduled)\n    const [hiddenState, setHiddenState] = useState(\n        Object.keys(tasks).reduce((obj, category) => ({\n            ...obj,\n            [category]: false\n        }), {})\n    )\n\n    const deliverables = [\n        {\n            key: '1',\n            name: 'Visualizing Group Matching',\n            grade: \"10%\",\n            type: \"Individual\",\n            dueDate: \"Jan 20\"\n        },\n        {\n            key: '2',\n            name: 'World values survey visualization',\n            grade: \"30%\",\n            type: \"Individual\",\n            dueDate: \"Jan 29\"\n        },\n        {\n            key: '3',\n            name: 'Project proposal',\n            grade: \"10%\",\n            type: \"Group\",\n            dueDate: \"Feb 8\"\n        },\n        {\n            key: '4',\n            name: 'Hello world demo',\n            grade: \"15%\",\n            type: \"Group\",\n            dueDate: \"Feb 14\"\n        }\n    ]\n\n    const columns = [\n        {\n            title: \"Assignment\",\n            dataIndex: \"name\",\n            key: \"name\"\n        },\n        {\n            title: \"Type\",\n            dataIndex: \"type\",\n            key: \"type\"\n        },\n        {\n            title: \"Grade %\",\n            dataIndex: \"grade\",\n            key: \"grade\"\n        },\n        {\n            title: \"Due date\",\n            dataIndex: \"dueDate\",\n            key: \"dueDate\"\n        }\n    ]\n\n    const onChangeSchedule = (task, hours) => {\n        const index = localScheduled.findIndex(item => item.task === task)\n        console.log(index)\n        if (index >= 0) {\n            //task is already scheduled, change it\n            const newScheduleItem = {\n                ...localScheduled[index],\n                hours: hours\n            }\n            let scheduleCopy = [...localScheduled]\n            scheduleCopy[index] = newScheduleItem\n            setLocalScheduled(scheduleCopy)\n        }\n        else {\n            const newScheduleItem = {\n                hours: hours,\n                task: task\n            }\n            setLocalScheduled([...localScheduled, newScheduleItem])\n        }\n    }\n\n    const getScheduledTimeForTask = (task, scheduledTimes) => {\n        const scheduledObj = scheduledTimes.find(time => time.task === task)\n        return scheduledObj ? scheduledObj.hours : 0\n    }\n\n\n    return (<div>\n        <div className=\"container\">\n            <div className=\"schedule-container\">\n                <h3>Plan your learning for the week</h3>\n                <TimeContext.Consumer>\n                    {({ scheduled, addScheduledTime, removeScheduledTime }) => (\n                        <div>\n                            {\n                                // scheduled.map(scheduleTime => (<div>\n                                //     <p>{scheduleTime.task}</p>\n                                //     <p>{scheduleTime.quarters} quarters.</p>\n                                //     <button onClick={() => removeScheduledTime({id: scheduleTime.id})}>Remove task from schedule</button>\n                                // </div>))\n                            }\n                            <div>\n                                {Object.keys(tasks).map(category => (\n                                    <div className=\"planner-container\">\n                                        <div className=\"category-name\" onClick={() => setHiddenState({ ...hiddenState, [category]: !hiddenState[category] })}>\n                                            <h2 >{category}</h2>\n                                            <div >\n                                                {hiddenState[category] ? <UpOutlined /> : <DownOutlined />}\n                                            </div>\n                                        </div>\n                                        { hiddenState[category] && (\n                                            <div>\n                                                <div className=\"schedule-task-container\">\n                                                    <span>\n                                                        <strong>Task</strong>\n                                                    </span>\n                                                    <span>\n                                                        <strong>Planned Time (Hours)</strong>\n                                                    </span>\n                                                </div>\n                                                {tasks[category].map(task => (\n                                                    <TaskScheduleComponent addTime={onChangeSchedule} task={task} inputHours={getScheduledTimeForTask(task, scheduled)} />\n                                                ))}\n                                            </div>)}\n                                        <Divider />\n\n                                    </div>\n                                ))}\n                                <Button type=\"primary\" onClick={() => addScheduledTime(localScheduled)}>Save Planning</Button>\n                            </div>\n                        </div>\n                    )}\n\n                </TimeContext.Consumer>\n            </div>\n            <div className=\"deliverables-container\">\n                <h3>Course assignments</h3>\n                <Table dataSource={deliverables} columns={columns} />\n            </div>\n        </div>\n    </div >\n    );\n}\nexport default ScheduleComponent;","import { useD3 } from '../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction BarChart({ data }) {\n  const ref = useD3(\n    (svg) => {\n      const height = 500;\n      const width = 500;\n      const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n      const x = d3\n        .scaleBand()\n        .domain(data.map((d) => d.year))\n        .rangeRound([margin.left, width - margin.right])\n        .padding(0.1);\n\n      const y1 = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, (d) => d.sales)])\n        .rangeRound([height - margin.bottom, margin.top]);\n\n      const xAxis = (g) =>\n        g.attr(\"transform\", `translate(0,${height - margin.bottom})`).call(\n          d3\n            .axisBottom(x)\n            .tickValues(\n              d3\n                .ticks(...d3.extent(x.domain()), width / 40)\n                .filter((v) => x(v) !== undefined)\n            )\n            .tickSizeOuter(0)\n        );\n\n      const y1Axis = (g) =>\n        g\n          .attr(\"transform\", `translate(${margin.left},0)`)\n          .style(\"color\", \"steelblue\")\n          .call(d3.axisLeft(y1).ticks(null, \"s\"))\n          .call((g) => g.select(\".domain\").remove())\n          .call((g) =>\n            g\n              .append(\"text\")\n              .attr(\"x\", -margin.left)\n              .attr(\"y\", 10)\n              .attr(\"fill\", \"currentColor\")\n              .attr(\"text-anchor\", \"start\")\n              .text(data.y1)\n          );\n\n      svg.select(\".x-axis\").call(xAxis);\n      svg.select(\".y-axis\").call(y1Axis);\n\n      svg\n        .select(\".plot-area\")\n        .attr(\"fill\", \"steelblue\")\n        .selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) => x(d.year))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", (d) => y1(d.sales))\n        .attr(\"height\", (d) => y1(0) - y1(d.sales));\n    },\n    [data.length]\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"0px\",\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default BarChart;","import { useD3 } from '../hooks/useD3';\nimport React, { component, useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport categories from '../Data/tasks'\n\nconst transitionDuration = 900;\n\nconst SunburstComponent = ({widthHeightValue = 300, data}) => {\n\n\tconst margin = { top: 50, right: 0, bottom: 0, left: 0 };\n\tconst width = widthHeightValue - margin.left - margin.right - margin.top;\n    const height = widthHeightValue - margin.top - margin.bottom;\n\n    let d3Container = useRef(null);\n\n    useEffect (( ) => {\n    \t    if(data && d3Container.current) {\n    \t    \tdata = Array.from(data, ([key, value]) => ({key,value}));\n\n        \t\tconst radius = Math.min(width, height) / 2 ;\n\n\t\t\t\td3.select(d3Container.current).selectAll('*').remove();\n\t\t    \tconst svg = d3.select(d3Container.current)\n\t\t\t  \t\t\t.append(\"svg\")\n\t\t\t    \t\t.attr(\"width\", width)\n\t\t\t    \t\t.attr(\"height\", height);\n\n\t\t\t    const g = svg.append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n\t\t\t    const color = d3.scaleOrdinal()\n\t\t  \t\t\t\t\t\t.domain(data.map(d => d.key))\n\t\t  \t\t\t\t\t\t.range([\"#204051\", \"#3B5070\", \"#675C88\", \"#996694\", \"#C97190\",\"#ED8382\",\"#FFA06F\"])\n\n\t\t  \t\tconst pie = d3.pie().value(d => d.value)\n\n\t\t  \t\tconst arc = d3.arc()\n\t\t                .innerRadius(0)\n\t\t                .outerRadius(radius);\n\n\t\t        const arcData = pie(data);       \n\t\t        \n\t\t        const arcs = g.selectAll(\"path\")\n\t\t                .data(arcData)\n\t\t                .join(\"path\")\n\t\t                .attr(\"fill\", d=>color(d.key))\n\t\t                .attr(\"stroke\", \"white\")\n\t\t                .attr(\"d\",arc);\n\n\t\t        const newarc = d3.arc()\n\t\t        \t\t\t\t.innerRadius(2 * radius / 3)\n\t\t        \t\t\t\t.outerRadius(radius);\n\n\t\t        arcs.append(\"text\")\n\t\t        \t.attr(\"transform\", d => {\n\t\t        \t\treturn \"translate(\" + newarc.centroid(d) + \")\";\n\t\t        \t})\n\t\t        \t.attr(\"text-anchor\", \"middle\")\n\t\t        \t.attr(\"fill\", \"white\")\n\t\t        \t.text(d => d.key);\n    \t\t}\n\n\n\n\n    },[data, d3Container.current]);\n\n\n\n\n\treturn (\n  \t<div id=\"sunBurst\" ref={d3Container}>\n\n  \t</div>\n  );\n};\n\nexport default SunburstComponent;","import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nconst LoadingBarComponent = ({ data, stacked = false, text }) => {\n    const width = 450\n    const height = 80;\n    const margin = { left: 10, right: 10, top: 5, bottom: 5 }\n    const [smallerName, setSmallerName] = useState('')\n    const [largerName, setLargerName] = useState('')\n\n    let propData = [{ type: \"Planned\", quarters: 10 }, { type: \"Reported\", quarters: 8 }]\n    let loadingBarContainer = useRef(null);\n\n    //render the chart\n    //we use useffect and ref to make d3 work\n    useEffect(() => {\n        //avoid null pointers\n        if (data && loadingBarContainer.current) {\n            console.log(\"drawing bar chart\")\n            data.sort((a, b) => b.quarters - a.quarters)\n            //assign data correctly\n            const largerData = [data[0]]\n            setLargerName(data[0].type)\n            setSmallerName(data[1].type)\n            const smallerData = [data[1]]\n\n            d3.select(loadingBarContainer.current).selectAll('*').remove()\n\n            const svg = d3.select(loadingBarContainer.current)\n                .append('svg')\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n\n            const scale = d3.scaleLinear()\n                .domain([0, d3.max(data, d => d.quarters)])\n                .range([margin.left, width - margin.right])\n\n            console.log('drawing larger bar')\n            const largerBar = svg.selectAll(null)\n                .data(largerData)\n                .enter()\n                .append('rect')\n                .attr('x', margin.left)\n                .attr('y', margin.top)\n                .attr('height', 75)\n                .attr('width', d => scale(d.quarters))\n                .attr('rx', 5)\n                .attr('ry', 5)\n                .style('fill', '#232931')\n\n            const smallerBar = svg.selectAll(null)\n                .data(smallerData)\n                .enter()\n                .append('rect')\n                .attr('x', margin.left)\n                .attr('y', margin.top)\n                .attr('height', 75)\n                .attr('width', d => scale(d.quarters))\n                .attr('rx', 5)\n                .attr('ry', 5)\n                .style('fill', '#67A890')\n            console.log('finished drawing')\n            console.log('finished drawing')\n\n\n        }\n    }, [loadingBarContainer.current]);\n\n    return (\n        <div>\n            <div className=\"loadingBar\" ref={loadingBarContainer}>\n\n            </div>\n            <p>{smallerName} / {largerName}</p>\n        </div>\n    )\n\n}\n\nexport default LoadingBarComponent;","import { getDefaultNormalizer } from '@testing-library/react';\nimport React, { useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport BarChart from './BarChart';\nimport SunBurst from './SunburstComponent';\nimport LoadingBar from './LoadingBarComponent';\nimport './VizView.css'\n\nconst VizComponent = () => {\n    return (\n        <div>\n            <h2>Visualizations</h2>\n            <TimeContext.Consumer>\n                {({ scheduled, reported, getReportedTimesBasedOnTask, getReportedAndScheduledReduced }) => (\n                    <>\n                        {(scheduled.length > 0 && reported.length > 0) ? (\n                            <div className=\"viz-container\">\n                                <div className=\"pie-container\">\n                                    <SunBurst data={getReportedTimesBasedOnTask()} />\n                                </div>\n                                <div className=\"loading-container\">\n                                    <LoadingBar data={getReportedAndScheduledReduced()} />\n                                </div>\n                            </div>)\n                            : (\n                                <p>You need to schedule and report work to see charts!</p>\n                            )}\n                    </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n    )\n}\n\nexport default VizComponent;","import React, { useContext, useState } from 'react';\nimport { TimeContext } from '../Contexts/TimeContext';\nimport { Button, Calendar, Modal, Badge } from 'antd';\nimport { TimePicker, TreeSelect, Menu, Divider } from 'antd';\nimport tasks from '../Data/tasks';\nimport moment from 'moment';\nimport { TreeNode } from 'antd/lib/tree-select';\nimport { Prompt } from 'react-router-dom'\n\nimport './ReportComponent.css'\nconst { RangePicker } = TimePicker;\nconst { SubMenu } = Menu;\nconst format = \"HH:mm\";\n\nconst DropdownMenu = ({ onTreeChange, value }) => (\n    <TreeSelect style={{ width: \"100%\" }} onChange={value => onTreeChange(value)} value={value}>\n        {Object.keys(tasks).map(cat => (\n            <TreeNode value={cat} title={cat} selectable={false}>\n                {tasks[cat].map(task => (\n                    <TreeNode value={task} title={task} />\n                ))}\n            </TreeNode>\n        ))}\n    </TreeSelect>\n)\n\nconst ReportComponent = () => {\n    const [showModal, setShowModal] = useState(false)\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [reports, setReports] = useState([])\n    const [rollingIdx, setRollingIdx] = useState(0);\n    const { reported } = useContext(TimeContext);\n    const onDateSelect = (date) => {\n        setSelectedDate(date.toDate())\n        setShowModal(true);\n    }\n\n    const onOk = () => {\n        setShowModal(false)\n    }\n\n    const onCancel = () => {\n        setShowModal(false)\n    }\n\n    const changeTaskTime = (id, startTime, endTime) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            startTime,\n            endTime\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const changeReportTask = (id, task) => {\n        const idx = reports.findIndex(report => report.id === id);\n        const newReport = {\n            ...reports[idx],\n            task: task\n        }\n        let reportCopy = [...reports]\n        reportCopy[idx] = newReport\n        setReports(reportCopy)\n    }\n\n    const getReportsFordate = (reports, date) => {\n        const momentDate = moment(date)\n        let reportsForDate = reports.filter(report => (report.startTime === null) || (moment(report.startTime).isSame(momentDate, 'day')))\n\n        // if(reportsForDate.length === 0){\n        //     const newReport = {id: rollingIdx+1, startTime: date, endTime: date}\n        //     setReports([...reports, newReport])\n        //     setRollingIdx(rollingIdx+1)\n        //     reportsForDate = [newReport]\n        // }\n        return reportsForDate;\n    }\n\n    const onAddTask = (date) => {\n        setReports([...reports, { id: rollingIdx + 1, startTime: date, endTime: date }])\n        setRollingIdx(rollingIdx + 1);\n    }\n\n    const dateCellRender = (value) => {\n        const reportsForDate = getReportsFordate([...reported, ...reports], value.toDate());\n        reportsForDate.sort((a, b) => a.startTime - b.startTime)\n        //if i sort in a lambda i won't need to write documentation, yeehaw!\n        return (<ul className=\"events\">\n            {reportsForDate.map(report => <li >\n                <div style={{ display: \"block\", backgroundColor: \"green\", color: \"white\", marginBottom: \"0.05rem\", borderRadius: \"5%\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", overflow: \"hidden\" }}>\n                    {`${moment(report.startTime).format(\"HH:mm\")}: ${report.task}`}\n                </div>\n                {/* <Badge text={`${moment(report.startTime).format(\"HH:mm\")}: ${report.task}`} status={'success'}/> */}\n            </li>)}\n        </ul>\n        )\n    }\n\n    return (<div>\n        <div className=\"calendar-container\">\n            <h3>This is where you report time worked</h3>\n            <Prompt when={reports.length > 0} message=\"You have unsaved changes! Are you sure you want to leave?\" />\n            <TimeContext.Consumer>\n                {({ reported, addReportedTime }) => (<>\n                    <Calendar onSelect={onDateSelect} dateCellRender={dateCellRender} />\n                    <Modal visible={showModal}\n                        onCancel={onCancel}\n                        onOk={onOk}\n                    >\n                        <h2>{selectedDate.toLocaleDateString()}</h2>\n                        {getReportsFordate([...reported, ...reports], selectedDate).map(report => (\n                            <>\n                                <RangePicker format={format} style={{ width: \"100%\" }} onChange={(dates, garbage) => changeTaskTime(report.id, dates[0].toDate(), dates[1].toDate())}\n                                    value={report.startTime ? [moment(report.startTime), moment(report.endTime)] : [null, null]} />\n                                <DropdownMenu onTreeChange={value => changeReportTask(report.id, value)} value={report.task} />\n                                <Divider />\n                            </>\n                        ))\n                        }\n                        <Button onClick={() => onAddTask(selectedDate)}>Add task</Button>\n                    </Modal>\n                    <Button className=\"fixed-button\" type=\"primary\" onClick={() => { addReportedTime(reports); setReports([]) }}>Save report</Button>\n                </>\n                )}\n            </TimeContext.Consumer>\n        </div>\n    </div >\n    );\n}\nexport default ReportComponent;","import logo from './logo.svg';\nimport TimeProvider from './Contexts/TimeContext';\nimport './App.css';\nimport ScheduleComponent from './Components/ScheduleComponent';\nimport VizComponent from './Components/VizView';\nimport ReportComponent from './Components/ReportComponent';\nimport { Menu } from 'antd';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <Router basename=\"/\">\n      <TimeProvider>\n        <div className=\"App\">\n          <div className=\"app-container\">\n            <div className=\"sidebar\">\n              <h2>Time reporter</h2>\n              <Menu mode=\"inline\"\n              style={{height:\"100%\"}}>\n                <Menu.Item key=\"1\">\n                  <Link to={\"/\"}>Home</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={\"/schedule\"}>Schedule</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={\"/report\"}>Report time worked</Link>\n                </Menu.Item>\n                <Menu.Item>\n                  <Link to={\"/viz\"}>Visualizations</Link>\n                </Menu.Item>\n              </Menu>\n              {/* <nav>\n                <ul>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                  <li>\n\n                  </li>\n                </ul>\n              </nav> */}\n            </div>\n            <div className=\"main-content\">\n              <Switch>\n                <Route path={\"/schedule\"}>\n                  <ScheduleComponent />\n                </Route>\n                <Route path={\"/viz\"}>\n                  <VizComponent />\n                </Route>\n                <Route path={\"/report\"}>\n                  <ReportComponent />\n                </Route>\n                <Route path={\"/\"}>\n                  <ScheduleComponent /> {/*If we create a landing page, this should lead there*/}\n                </Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </TimeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}